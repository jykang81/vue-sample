version: 0.2

env:
  parameter-store:
    NSM_MOBILEWEB: /nsm/mobileweb/deploy

phases:
  install:
    runtime-versions:
      nodejs: 12
    commands:
      - ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
      - npm i chrome-launcher --save-dev
      - npm i --silent --progress=false -g --unsafe-perm serverless
      - npm i serverless-finch --save
      - npm i --no-optional
      - pip install pyopenssl --upgrade
      - DEPLOY_VERSION=$(cat package.json | jq .version -r)
      - echo $DEPLOY_VERSION

  pre_build:
    commands:
      # Save artifacts
      - tar -czvf $DEPLOY_VERSION.gz client/dist/* client/serverless.yml deployspec.yml package.json package-lock.json
      - aws s3 cp $DEPLOY_VERSION.gz s3://nsm-dev-serverless-cicd-bucket/ui-mobile-$STAGE/artifact/$DEPLOY_VERSION.gz

      # Role change
      - echo -n "STAGE:" && echo ${STAGE}
      - echo $NSM_MOBILEWEB
      - |
        if [ "$STAGE" = "dev" ]; then
          echo 'Stage is dev'
          DISTRIBUTION_ID=$(echo $NSM_MOBILEWEB | jq -r .dev.DISTRIBUTION_ID)
          echo $DISTRIBUTION_ID
        fi
      - |
        if [ "$STAGE" = "test" ]; then
          DISTRIBUTION_ID=$(echo $NSM_MOBILEWEB | jq -r .test.DISTRIBUTION_ID)
          ACCESS_KEY=$(echo $NSM_MOBILEWEB | jq -r .test.ACCESS_KEY)
          SECRET_KEY=$(echo $NSM_MOBILEWEB | jq -r .test.SECRET_KEY)
          ROLE_NAME=$(echo $NSM_MOBILEWEB | jq -r .test.ROLE_NAME)
        fi
      - |
        if [ "$STAGE" = "prod" ]; then
          DISTRIBUTION_ID=$(echo $NSM_MOBILEWEB | jq -r .prod.DISTRIBUTION_ID)
          ACCESS_KEY=$(echo $NSM_MOBILEWEB | jq -r .prod.ACCESS_KEY)
          SECRET_KEY=$(echo $NSM_MOBILEWEB | jq -r .prod.SECRET_KEY)
          ROLE_NAME=$(echo $NSM_MOBILEWEB | jq -r .prod.ROLE_NAME)
        fi
      - cd client/

  build:
    commands:
      - |
        if [ "$STAGE" = "test" ]; then
          CRED=`aws sts assume-role --role-arn arn:aws:iam::524041017321:role/$ROLE_NAME --role-session-name serverless-deploy-access`
          echo $CRED
          AWS_ACCESS_KEY_ID=`node -pe 'JSON.parse(process.argv[1]).Credentials.AccessKeyId' "$CRED"`
          AWS_SECRET_ACCESS_KEY=`node -pe 'JSON.parse(process.argv[1]).Credentials.SecretAccessKey' "$CRED"`
          AWS_SESSION_TOKEN=`node -pe 'JSON.parse(process.argv[1]).Credentials.SessionToken' "$CRED"`
          AWS_EXPIRATION=`node -pe 'JSON.parse(process.argv[1]).Credentials.Expiration' "$CRED"`
        fi
      - |
        if [ "$STAGE" = "prod" ]; then
          CRED=`aws sts assume-role --role-arn arn:aws:iam::419808536006:role/$ROLE_NAME --role-session-name serverless-deploy-access`
          echo $CRED
          AWS_ACCESS_KEY_ID=`node -pe 'JSON.parse(process.argv[1]).Credentials.AccessKeyId' "$CRED"`
          AWS_SECRET_ACCESS_KEY=`node -pe 'JSON.parse(process.argv[1]).Credentials.SecretAccessKey' "$CRED"`
          AWS_SESSION_TOKEN=`node -pe 'JSON.parse(process.argv[1]).Credentials.SessionToken' "$CRED"`
          AWS_EXPIRATION=`node -pe 'JSON.parse(process.argv[1]).Credentials.Expiration' "$CRED"`
        fi
      - sls client deploy --no-confirm --no-config-change --no-policy-change --no-cors-change --stage $STAGE

  post_build:
    commands:
      # Deploy
      - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths /js/* /index.html /gate.html /gate.jsp /images/* /img/* /css/* > invalidation.json
      - cat invalidation.json

cache:
  paths:
    - client/dist